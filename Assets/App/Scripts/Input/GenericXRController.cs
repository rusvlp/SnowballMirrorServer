//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/App/Scripts/Input/GenericXRController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GenericXRController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GenericXRController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GenericXRController"",
    ""maps"": [
        {
            ""name"": ""RightHand"",
            ""id"": ""d99b3eb8-851b-47a1-90de-efb0fdbca4f0"",
            ""actions"": [
                {
                    ""name"": ""GripValue"",
                    ""type"": ""PassThrough"",
                    ""id"": ""988f2367-7262-4079-83da-2ef1146d3ba4"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TriggerValue"",
                    ""type"": ""PassThrough"",
                    ""id"": ""db6905ed-0d32-4a8a-9b15-2ab4b7901f0a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""StickValue"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ea2c9cf0-301b-4d51-ae6d-e9cd1ceb37cf"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AButton"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1324fd37-1b2c-47d2-b266-fb942a7393d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5d7b398c-b81d-42b7-b55c-c2ddf4ea04b1"",
                    ""path"": ""<XRController>{RightHand}/grip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GripValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5091de01-f606-4d1c-b178-dac34c5d799e"",
                    ""path"": ""<XRController>{RightHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TriggerValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""293c4509-a5b1-4a50-b117-79f1bbfcc778"",
                    ""path"": ""<XRController>{RightHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StickValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c0dc55b-1ff2-45cf-8324-b85c2eb46b1f"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LeftHand"",
            ""id"": ""2f954215-8cb3-40ed-9635-5ce0add73109"",
            ""actions"": [
                {
                    ""name"": ""GripValue"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f91576a3-0684-4f82-a697-283b2a657e08"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TriggerValue"",
                    ""type"": ""PassThrough"",
                    ""id"": ""626b5f32-2d96-4791-8dba-2a2e8fca6eb5"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""StickValue"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b69a7b70-4ff3-4a2d-8ead-8a6338543333"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""835f18e4-0803-442b-93ef-1757a9f94522"",
                    ""path"": ""<XRController>{LeftHand}/grip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GripValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6039db01-f460-4f4d-ab3a-285f1ecc97f0"",
                    ""path"": ""<XRController>{LeftHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TriggerValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a47650b9-dc3a-42a4-ad94-5a1e24965e83"",
                    ""path"": ""<XRController>{LeftHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StickValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Head"",
            ""id"": ""de1fae90-d888-46f4-b66d-0a5d00279696"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""4f9960db-b39e-4837-9b2e-abadd4b8cee2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""14221941-4b46-485f-ba98-6420277d5930"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // RightHand
        m_RightHand = asset.FindActionMap("RightHand", throwIfNotFound: true);
        m_RightHand_GripValue = m_RightHand.FindAction("GripValue", throwIfNotFound: true);
        m_RightHand_TriggerValue = m_RightHand.FindAction("TriggerValue", throwIfNotFound: true);
        m_RightHand_StickValue = m_RightHand.FindAction("StickValue", throwIfNotFound: true);
        m_RightHand_AButton = m_RightHand.FindAction("AButton", throwIfNotFound: true);
        // LeftHand
        m_LeftHand = asset.FindActionMap("LeftHand", throwIfNotFound: true);
        m_LeftHand_GripValue = m_LeftHand.FindAction("GripValue", throwIfNotFound: true);
        m_LeftHand_TriggerValue = m_LeftHand.FindAction("TriggerValue", throwIfNotFound: true);
        m_LeftHand_StickValue = m_LeftHand.FindAction("StickValue", throwIfNotFound: true);
        // Head
        m_Head = asset.FindActionMap("Head", throwIfNotFound: true);
        m_Head_Newaction = m_Head.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // RightHand
    private readonly InputActionMap m_RightHand;
    private IRightHandActions m_RightHandActionsCallbackInterface;
    private readonly InputAction m_RightHand_GripValue;
    private readonly InputAction m_RightHand_TriggerValue;
    private readonly InputAction m_RightHand_StickValue;
    private readonly InputAction m_RightHand_AButton;
    public struct RightHandActions
    {
        private @GenericXRController m_Wrapper;
        public RightHandActions(@GenericXRController wrapper) { m_Wrapper = wrapper; }
        public InputAction @GripValue => m_Wrapper.m_RightHand_GripValue;
        public InputAction @TriggerValue => m_Wrapper.m_RightHand_TriggerValue;
        public InputAction @StickValue => m_Wrapper.m_RightHand_StickValue;
        public InputAction @AButton => m_Wrapper.m_RightHand_AButton;
        public InputActionMap Get() { return m_Wrapper.m_RightHand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RightHandActions set) { return set.Get(); }
        public void SetCallbacks(IRightHandActions instance)
        {
            if (m_Wrapper.m_RightHandActionsCallbackInterface != null)
            {
                @GripValue.started -= m_Wrapper.m_RightHandActionsCallbackInterface.OnGripValue;
                @GripValue.performed -= m_Wrapper.m_RightHandActionsCallbackInterface.OnGripValue;
                @GripValue.canceled -= m_Wrapper.m_RightHandActionsCallbackInterface.OnGripValue;
                @TriggerValue.started -= m_Wrapper.m_RightHandActionsCallbackInterface.OnTriggerValue;
                @TriggerValue.performed -= m_Wrapper.m_RightHandActionsCallbackInterface.OnTriggerValue;
                @TriggerValue.canceled -= m_Wrapper.m_RightHandActionsCallbackInterface.OnTriggerValue;
                @StickValue.started -= m_Wrapper.m_RightHandActionsCallbackInterface.OnStickValue;
                @StickValue.performed -= m_Wrapper.m_RightHandActionsCallbackInterface.OnStickValue;
                @StickValue.canceled -= m_Wrapper.m_RightHandActionsCallbackInterface.OnStickValue;
                @AButton.started -= m_Wrapper.m_RightHandActionsCallbackInterface.OnAButton;
                @AButton.performed -= m_Wrapper.m_RightHandActionsCallbackInterface.OnAButton;
                @AButton.canceled -= m_Wrapper.m_RightHandActionsCallbackInterface.OnAButton;
            }
            m_Wrapper.m_RightHandActionsCallbackInterface = instance;
            if (instance != null)
            {
                @GripValue.started += instance.OnGripValue;
                @GripValue.performed += instance.OnGripValue;
                @GripValue.canceled += instance.OnGripValue;
                @TriggerValue.started += instance.OnTriggerValue;
                @TriggerValue.performed += instance.OnTriggerValue;
                @TriggerValue.canceled += instance.OnTriggerValue;
                @StickValue.started += instance.OnStickValue;
                @StickValue.performed += instance.OnStickValue;
                @StickValue.canceled += instance.OnStickValue;
                @AButton.started += instance.OnAButton;
                @AButton.performed += instance.OnAButton;
                @AButton.canceled += instance.OnAButton;
            }
        }
    }
    public RightHandActions @RightHand => new RightHandActions(this);

    // LeftHand
    private readonly InputActionMap m_LeftHand;
    private ILeftHandActions m_LeftHandActionsCallbackInterface;
    private readonly InputAction m_LeftHand_GripValue;
    private readonly InputAction m_LeftHand_TriggerValue;
    private readonly InputAction m_LeftHand_StickValue;
    public struct LeftHandActions
    {
        private @GenericXRController m_Wrapper;
        public LeftHandActions(@GenericXRController wrapper) { m_Wrapper = wrapper; }
        public InputAction @GripValue => m_Wrapper.m_LeftHand_GripValue;
        public InputAction @TriggerValue => m_Wrapper.m_LeftHand_TriggerValue;
        public InputAction @StickValue => m_Wrapper.m_LeftHand_StickValue;
        public InputActionMap Get() { return m_Wrapper.m_LeftHand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftHandActions set) { return set.Get(); }
        public void SetCallbacks(ILeftHandActions instance)
        {
            if (m_Wrapper.m_LeftHandActionsCallbackInterface != null)
            {
                @GripValue.started -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnGripValue;
                @GripValue.performed -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnGripValue;
                @GripValue.canceled -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnGripValue;
                @TriggerValue.started -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnTriggerValue;
                @TriggerValue.performed -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnTriggerValue;
                @TriggerValue.canceled -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnTriggerValue;
                @StickValue.started -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnStickValue;
                @StickValue.performed -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnStickValue;
                @StickValue.canceled -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnStickValue;
            }
            m_Wrapper.m_LeftHandActionsCallbackInterface = instance;
            if (instance != null)
            {
                @GripValue.started += instance.OnGripValue;
                @GripValue.performed += instance.OnGripValue;
                @GripValue.canceled += instance.OnGripValue;
                @TriggerValue.started += instance.OnTriggerValue;
                @TriggerValue.performed += instance.OnTriggerValue;
                @TriggerValue.canceled += instance.OnTriggerValue;
                @StickValue.started += instance.OnStickValue;
                @StickValue.performed += instance.OnStickValue;
                @StickValue.canceled += instance.OnStickValue;
            }
        }
    }
    public LeftHandActions @LeftHand => new LeftHandActions(this);

    // Head
    private readonly InputActionMap m_Head;
    private IHeadActions m_HeadActionsCallbackInterface;
    private readonly InputAction m_Head_Newaction;
    public struct HeadActions
    {
        private @GenericXRController m_Wrapper;
        public HeadActions(@GenericXRController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Head_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Head; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HeadActions set) { return set.Get(); }
        public void SetCallbacks(IHeadActions instance)
        {
            if (m_Wrapper.m_HeadActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_HeadActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_HeadActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_HeadActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_HeadActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public HeadActions @Head => new HeadActions(this);
    public interface IRightHandActions
    {
        void OnGripValue(InputAction.CallbackContext context);
        void OnTriggerValue(InputAction.CallbackContext context);
        void OnStickValue(InputAction.CallbackContext context);
        void OnAButton(InputAction.CallbackContext context);
    }
    public interface ILeftHandActions
    {
        void OnGripValue(InputAction.CallbackContext context);
        void OnTriggerValue(InputAction.CallbackContext context);
        void OnStickValue(InputAction.CallbackContext context);
    }
    public interface IHeadActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
